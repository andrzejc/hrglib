if(_ASANRulesOverrideModuleIncluded)
    return()
else()
    set(_ASANRulesOverrideModuleIncluded TRUE)
endif()

if(NOT ASAN_BASE_CONFIGURATION)
    set(ASAN_BASE_CONFIGURATION Debug)
endif()
string(TOUPPER "${ASAN_BASE_CONFIGURATION}" ASAN_BASE_CONFIGURATION)

set(_ASAN_C_CXX_COMMON_FLAGS)
set(_ASAN_DYNAMIC_LINKER_FLAGS)

if(CMAKE_C_COMPILER_ID MATCHES "GNU|Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(_ASAN_C_CXX_COMMON_FLAGS "-fsanitize=address -fno-omit-frame-pointer")
    set(_ASAN_DYNAMIC_LINKER_FLAGS -fsanitize=address)
else()
    message(WARNING "AddressSanitizer is not available with compiler ${CMAKE_C_COMPILER_ID}")
endif()

set(CMAKE_C_FLAGS_ASAN_INIT "${CMAKE_C_FLAGS_${ASAN_BASE_CONFIGURATION}_INIT} ${_ASAN_C_CXX_COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS_ASAN_INIT "${CMAKE_CXX_FLAGS_${ASAN_BASE_CONFIGURATION}_INIT} ${_ASAN_C_CXX_COMMON_FLAGS}")

set(CMAKE_SHARED_LINKER_FLAGS_COVERAGE_INIT "${CMAKE_SHARED_LINKER_FLAGS_${ASAN_BASE_CONFIGURATION}_INIT} ${_ASAN_DYNAMIC_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_COVERAGE_INIT "${CMAKE_EXE_LINKER_FLAGS_${ASAN_BASE_CONFIGURATION}_INIT} ${_ASAN_DYNAMIC_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS_COVERAGE_INIT "${CMAKE_MODULE_LINKER_FLAGS_${ASAN_BASE_CONFIGURATION}_INIT} ${_ASAN_DYNAMIC_LINKER_FLAGS}")

get_property(_ASAN_GENERATOR_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)

if(_ASAN_GENERATOR_MULTI_CONFIG)
    if(NOT "ASAN" IN_LIST CMAKE_CONFIGURATION_TYPES)
        list(APPEND CMAKE_CONFIGURATION_TYPES ASAN)
    endif()
endif()
